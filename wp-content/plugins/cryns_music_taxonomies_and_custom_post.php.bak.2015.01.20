<?php 
/*
Plugin Name: Cryns Music Taxonomies and Custom Post Type
Plugin URI: http://www.themightymo.com/
Description: Creates the "Audio File" custom post type and all audio file custom taxonomies.  It also adds audio file meta data to the front end (filters the_content).  This plugin depends on the "Custom Field Template" plugin.
Version: 0.2
Author: Toby Cryns
Author URI: http://www.themightymo.com
License: This plugin is owned by Toby Cryns.
*/

// Let's add the insert_album_details() function where it needs to go
add_filter ('the_content','add_album_details');
function add_album_details($content){
	if ( is_singular('cryns_audio_file') || is_post_type_archive() || is_tax() ) {
		insert_album_details();
		return $content;
	} else {
		return $content;	
	}
}


// Add all the audio meta data and audio player to the front end - Note the audio player requires the "Audio Player" plugin
function insert_album_details () {
	
	// Creates the variable, $myAlbumTitle
	$terms = get_the_terms ($post->id, 'cryns_album_title'); 
	if ($terms) {
		unset($myterms);
		foreach ($terms as $term) {
			$myterms[] = $term->name;
			}
									
		$myAlbumTitle = join(", ", $myterms);
	}
	 
	// Creates the variable, $myArtist
	$terms = get_the_terms ($post->id, 'cryns_artist'); 
	if ($terms) {
		unset($myterms);
		foreach ($terms as $term) {
			$myterms[] = $term->name;
			}
									
		$myArtist = join(", ", $myterms);
	}
	?>	
	
    <?php if (get_the_term_list( get_the_ID(), 'cryns_artist', "Artist: " )) { 
		echo '<span class="audio-meta">';
		echo get_the_term_list( get_the_ID(), 'cryns_artist', "Artist: " );
		echo '</span><br />';
	}
	?>
    
	<?php if (get_the_term_list( get_the_ID(), 'cryns_album_title', "Album Title: " )) {
		echo '<span class="audio-meta">';
		echo get_the_term_list( get_the_ID(), 'cryns_album_title', "Album Title: " ); 
		echo '</span><br />';
	}
	?>
	
    <?php if (get_the_term_list( get_the_ID(), 'cryns_genre', "Genre(s): ", ', ' )) {
		echo '<span class="audio-meta">';
		echo get_the_term_list( get_the_ID(), 'cryns_genre', "Genre(s): ", ', ' ); 
		echo '</span><br />';
    }
    ?>
    
	<?php if (get_the_term_list( get_the_ID(), 'cryns_producer', "Producer(s): ", ', ' )) {
		echo '<span class="audio-meta">';
		echo get_the_term_list( get_the_ID(), 'cryns_producer', "Producer(s): ", ', ' );
		echo '</span><br />';
	}
	?>
    
	<?php if (get_the_term_list( get_the_ID(), 'cryns_engineer', "Engineer(s): ", ', ' )) {
		echo '<span class="audio-meta">';
		echo get_the_term_list( get_the_ID(), 'cryns_engineer', "Engineer(s): ", ', ' ); 
		echo '</span><br />';
	}?>
    
	<?php if (get_the_term_list( get_the_ID(), 'cryns_musicians', "Musicians: ", ', ' )) {
		echo '<span class="audio-meta">';
		echo get_the_term_list( get_the_ID(), 'cryns_musicians', "Musicians: ", ', ' ); 
		echo '</span><br />';
	}
	?>
    
	<?php if (get_the_term_list( get_the_ID(), 'cryns_release_year', "Release Year: " )) {
		echo '<span class="audio-meta">';
		echo get_the_term_list( get_the_ID(), 'cryns_release_year', "Release Year: " ); 
		echo '<br /></span>';
	}
	?>
    
	<?php if (get_the_term_list( get_the_ID(), 'cryns_track_number', "Track Number: " )) {
		echo '<span class="audio-meta">';
		echo get_the_term_list( get_the_ID(), 'cryns_track_number', "Track Number: " ); 
		echo '<br /></span>';
	}
	?>
    
	<?php if (get_the_term_list( get_the_ID(), 'cryns_written_by', "Written By: " )) {
		echo '<span class="audio-meta">';
		echo get_the_term_list( get_the_ID(), 'cryns_written_by', "Written By: ", ', ' );
		echo '<br /></span>';
	}
	?>
	
	<?php /*?><?php echo get_the_term_list( get_the_ID(), 'cryns_instrument', "Instruments: ", ', ' ) ?><br /><?php */?>
	
    <?php global $post; ?>
   	
    <?php if (get_post_meta($post->ID, 'Audio File', true)) { ?>
    	<span class="audio-meta">
		Download: <a href="<?php echo wp_get_attachment_url(get_post_meta($post->ID, 'Audio File', true)); ?>"><?php the_title(); ?></a><br /><br />
        </span>
    <?php } ?>
    
	<?php 
	
	display_audio_player ( wp_get_attachment_url(get_post_meta($post->ID, 'Audio File', true)) );
	 
}

function display_audio_player ($audiourl) {
	if (function_exists('insert_audio_player')) {  
        insert_audio_player('[audio:'. $audiourl .'|titles='.get_the_title().'|artists=Album: '.$myAlbumTitle.' Artist: '.$myArtist.']');  
	} 
}





// MICHAEL ARMSTRONG!

function michaelarmstrong_full_playlist() {
	
   rewind_posts();
   
   $key = 0;
   
   if (have_posts()) : 
      while (have_posts()) : the_post();
		
		
		 // Creates the variable, $myAlbumTitle
		$terms = get_the_terms ($post->id, 'cryns_album_title'); 
		if ($terms) {
			unset($myterms);
			foreach ($terms as $term) {
				$myterms[] = $term->name;
				}
										
			$myAlbumTitle = join(", ", $myterms);
		}
		 
		// Creates the variable, $myArtist
		$terms = get_the_terms ($post->id, 'cryns_artist'); 
		if ($terms) {
			unset($myterms);
			foreach ($terms as $term) {
				$myterms[] = $term->name;
				}
										
			$myArtist = join(", ", $myterms);
		}
		
		
         $music_filename[$key] = wp_get_attachment_url(get_post_meta(get_the_id(), 'Audio File', true));
         $music_title[$key] = $myAlbumTitle;
         $music_artist[$key] = $myArtist;
         $key++;
     endwhile;
	 endif;
	 
	 
   # output block
   $output = '[audio:';
   for ($i = 0; $i < $key; $i++) {
      # $output .= $music_filename[$key] . ",";
      $output .= sprintf("%s,", $music_filename[$i]);
   }
   $output = substr($output, 0, -1);
   $output .= '|titles=';
   for ($i = 0; $i < $key; $i++) {
      $output .= sprintf("%s,", $music_title[$i]);
   }
   $output = substr($output, 0, -1);
   $output .= '|artists=';
   for ($i = 0; $i < $key; $i++) {
      $output .= sprintf("%s,", $music_artist[$i]);
   }
   $output = substr($output, 0, -1);
   $output .= ']';

   //echo $output . "\n";
   insert_audio_player($output);
   
   

}

// MICHAEL ARMSTRONG!










// Create the "Audio File" custom post type
add_action('init', 'codex_custom_init');
function codex_custom_init() 
{
  $labels = array(
    'name' => _x('Audio File', 'post type general name'),
    'singular_name' => _x('Audio File', 'post type singular name'),
    'add_new' => _x('Add New', 'cryns_audio_file'),
    'add_new_item' => __('Add New Audio File'),
    'edit_item' => __('Edit Audio File'),
    'new_item' => __('New Audio File'),
    'view_item' => __('View Audio File'),
    'search_items' => __('Search Audio Files'),
    'not_found' =>  __('No Audio Files found'),
    'not_found_in_trash' => __('No Audio Files found in Trash'), 
    'parent_item_colon' => '',
    'menu_name' => 'Audio Files'

  );
  $args = array(
    'labels' => $labels,
    'public' => true,
    'publicly_queryable' => true,
    'show_ui' => true, 
    'show_in_menu' => true, 
    'query_var' => true,
    'rewrite' => array('slug'=>'songs'),
    'capability_type' => 'post',
    'has_archive' => true, 
    'hierarchical' => false,
    'menu_position' => 3,
	'slug' => 'music-file',
    'supports' => array('title','editor','custom-fields','author','excerpt','comments')
  ); 
  register_post_type('cryns_audio_file',$args);
}

// THIS STILL NEEDS TO BE EDITED - add filter to ensure the text Book, or book, is displayed when user updates a book 
add_filter('post_updated_messages', 'codex_cryns_audio_file_updated_messages');
function codex_cryns_audio_file_updated_messages( $messages ) {
  global $post, $post_ID;

  $messages['cryns_audio_file'] = array(
    0 => '', // Unused. Messages start at index 1.
    1 => sprintf( __('Audio File updated. <a href="%s">View Audio File</a>'), esc_url( get_permalink($post_ID) ) ),
    2 => __('Custom field updated.'),
    3 => __('Custom field deleted.'),
    4 => __('Audio File updated.'),
    /* translators: %s: date and time of the revision */
    5 => isset($_GET['revision']) ? sprintf( __('Audio File restored to revision from %s'), wp_post_revision_title( (int) $_GET['revision'], false ) ) : false,
    6 => sprintf( __('Audio File published. <a href="%s">View Audio File</a>'), esc_url( get_permalink($post_ID) ) ),
    7 => __('Audio File saved.'),
    8 => sprintf( __('Audio File submitted. <a target="_blank" href="%s">Preview Audio File</a>'), esc_url( add_query_arg( 'preview', 'true', get_permalink($post_ID) ) ) ),
    9 => sprintf( __('Audio File scheduled for: <strong>%1$s</strong>. <a target="_blank" href="%2$s">Preview Audio File</a>'),
      // translators: Publish box date format, see http://php.net/date
      date_i18n( __( 'M j, Y @ G:i' ), strtotime( $post->post_date ) ), esc_url( get_permalink($post_ID) ) ),
    10 => sprintf( __('Audio File draft updated. <a target="_blank" href="%s">Preview Audio File</a>'), esc_url( add_query_arg( 'preview', 'true', get_permalink($post_ID) ) ) ),
  );

  return $messages;
}

//display contextual help for Books
add_action( 'contextual_help', 'codex_add_help_text', 10, 3 );

function codex_add_help_text($contextual_help, $screen_id, $screen) { 
  //$contextual_help .= var_dump($screen); // use this to help determine $screen->id
  if ('book' == $screen->id ) {
    $contextual_help =
      '<p>' . __('Things to remember when adding or editing a book:') . '</p>' .
      '<ul>' .
      '<li>' . __('Specify the correct genre such as Mystery, or Historic.') . '</li>' .
      '<li>' . __('Specify the correct writer of the book.  Remember that the Author module refers to you, the author of this book review.') . '</li>' .
      '</ul>' .
      '<p>' . __('If you want to schedule the book review to be published in the future:') . '</p>' .
      '<ul>' .
      '<li>' . __('Under the Publish module, click on the Edit link next to Publish.') . '</li>' .
      '<li>' . __('Change the date to the date to actual publish this article, then click on Ok.') . '</li>' .
      '</ul>' .
      '<p><strong>' . __('For more information:') . '</strong></p>' .
      '<p>' . __('<a href="http://codex.wordpress.org/Posts_Edit_SubPanel" target="_blank">Edit Posts Documentation</a>') . '</p>' .
      '<p>' . __('<a href="http://wordpress.org/support/" target="_blank">Support Forums</a>') . '</p>' ;
  } elseif ( 'edit-book' == $screen->id ) {
    $contextual_help = 
      '<p>' . __('This is the help screen displaying the table of books blah blah blah.') . '</p>' ;
  }
  return $contextual_help;
}











//hook into the init action and call create_cryns_audio_files_taxonomies when it fires
add_action( 'init', 'create_cryns_audio_files_taxonomies', 0 );

//create the taxonomies that will hook onto the Audio File custom post type
function create_cryns_audio_files_taxonomies() 
{
  // Add new taxonomy, make it hierarchical (like categories)
  $labels = array(
    'name' => _x( 'Artist', 'taxonomy general name' ),
    'singular_name' => _x( 'Artist', 'taxonomy singular name' ),
    'search_items' =>  __( 'Search Artists' ),
    'all_items' => __( 'All Artists' ),
    'parent_item' => __( 'Parent Artist' ),
    'parent_item_colon' => __( 'Parent Artist:' ),
    'edit_item' => __( 'Edit Artist' ), 
    'update_item' => __( 'Update Artist' ),
    'add_new_item' => __( 'Add New Artist' ),
    'new_item_name' => __( 'New Artist Name' ),
    'menu_name' => __( 'Artist' ),
  ); 	

  register_taxonomy('cryns_artist',array('cryns_audio_file'), array(
    'hierarchical' => true,
    'labels' => $labels,
    'show_ui' => true,
    'query_var' => true,
    'rewrite' => array( 'slug' => 'artist' ),
  ));
  
  // Add new taxonomy, make it hierarchical (like categories)
  $labels = array(
    'name' => _x( 'Album Title', 'taxonomy general name' ),
    'singular_name' => _x( 'Album Title', 'taxonomy singular name' ),
    'search_items' =>  __( 'Search Album Titles' ),
    'all_items' => __( 'All Album Titles' ),
    'parent_item' => __( 'Parent Album Titles' ),
    'parent_item_colon' => __( 'Parent Album Titles:' ),
    'edit_item' => __( 'Edit Album Title' ), 
    'update_item' => __( 'Update Album Title' ),
    'add_new_item' => __( 'Add New Album Title' ),
    'new_item_name' => __( 'New Album Title Name' ),
    'menu_name' => __( 'Album Title' ),
  ); 	

  register_taxonomy('cryns_album_title',array('cryns_audio_file'), array(
    'hierarchical' => true,
    'labels' => $labels,
    'show_ui' => true,
    'query_var' => true,
    'rewrite' => array( 'slug' => 'album-title' ),
  ));
  
  // Add new taxonomy, make it hierarchical (like categories)
  $labels = array(
    'name' => _x( 'Songwriter', 'taxonomy general name' ),
    'singular_name' => _x( 'Songwriter', 'taxonomy singular name' ),
    'search_items' =>  __( 'Search Songwriters' ),
    'all_items' => __( 'All Songwriters' ),
    'parent_item' => __( 'Parent Songwriters' ),
    'parent_item_colon' => __( 'Parent Songwriters:' ),
    'edit_item' => __( 'Edit Songwriter' ), 
    'update_item' => __( 'Update Songwriter' ),
    'add_new_item' => __( 'Add New Songwriter' ),
    'new_item_name' => __( 'New Songwriter Name' ),
    'menu_name' => __( 'Songwriters' ),
  ); 	

  register_taxonomy('cryns_written_by',array('cryns_audio_file'), array(
    'hierarchical' => true,
    'labels' => $labels,
    'show_ui' => true,
    'query_var' => true,
    'rewrite' => array( 'slug' => 'written-by' ),
  ));
  
  // Add new taxonomy, make it hierarchical (like categories)
  $labels = array(
    'name' => _x( 'Producers', 'taxonomy general name' ),
    'singular_name' => _x( 'Producers', 'taxonomy singular name' ),
    'search_items' =>  __( 'Search Producers' ),
    'all_items' => __( 'All Producers' ),
    'parent_item' => __( 'Parent Producers' ),
    'parent_item_colon' => __( 'Parent Producers:' ),
    'edit_item' => __( 'Edit Producer' ), 
    'update_item' => __( 'Update Producer' ),
    'add_new_item' => __( 'Add New Producer' ),
    'new_item_name' => __( 'New Producer Name' ),
    'menu_name' => __( 'Producer' ),
  ); 	

  register_taxonomy('cryns_producer',array('cryns_audio_file'), array(
    'hierarchical' => true,
    'labels' => $labels,
    'show_ui' => true,
    'query_var' => true,
    'rewrite' => array( 'slug' => 'producer' ),
  ));
  
  // Add new taxonomy, make it hierarchical (like categories)
  $labels = array(
    'name' => _x( 'Engineers', 'taxonomy general name' ),
    'singular_name' => _x( 'Engineers', 'taxonomy singular name' ),
    'search_items' =>  __( 'Search Engineers' ),
    'all_items' => __( 'All Engineers' ),
    'parent_item' => __( 'Parent Engineers' ),
    'parent_item_colon' => __( 'Parent Engineers:' ),
    'edit_item' => __( 'Edit Engineer' ), 
    'update_item' => __( 'Update Engineer' ),
    'add_new_item' => __( 'Add New Engineer' ),
    'new_item_name' => __( 'New Engineer Name' ),
    'menu_name' => __( 'Engineer' ),
  ); 	

  register_taxonomy('cryns_engineer',array('cryns_audio_file'), array(
    'hierarchical' => true,
    'labels' => $labels,
    'show_ui' => true,
    'query_var' => true,
    'rewrite' => array( 'slug' => 'engineer' ),
  ));
  
  // Add new taxonomy, make it hierarchical (like categories)
  /*$labels = array(
    'name' => _x( 'Instruments', 'taxonomy general name' ),
    'singular_name' => _x( 'Instruments', 'taxonomy singular name' ),
    'search_items' =>  __( 'Search Instruments' ),
    'all_items' => __( 'All Instruments' ),
    'parent_item' => __( 'Parent Instruments' ),
    'parent_item_colon' => __( 'Parent Instruments:' ),
    'edit_item' => __( 'Edit Instrument' ), 
    'update_item' => __( 'Update Instrument' ),
    'add_new_item' => __( 'Add New Instrument' ),
    'new_item_name' => __( 'New Instrument Name' ),
    'menu_name' => __( 'Instruments' ),
  ); 	

  register_taxonomy('cryns_instrument',array('cryns_audio_file'), array(
    'hierarchical' => true,
    'labels' => $labels,
    'show_ui' => true,
    'query_var' => true,
    'rewrite' => array( 'slug' => 'instrument' ),
  ));*/
  
  
  // Add new taxonomy, make it hierarchical (like categories)
  $labels = array(
    'name' => _x( 'Genres', 'taxonomy general name' ),
    'singular_name' => _x( 'Genre', 'taxonomy singular name' ),
    'search_items' =>  __( 'Search Genres' ),
    'all_items' => __( 'All Genres' ),
    'parent_item' => __( 'Parent Genres' ),
    'parent_item_colon' => __( 'Parent Genres:' ),
    'edit_item' => __( 'Edit Genre' ), 
    'update_item' => __( 'Update Genre' ),
    'add_new_item' => __( 'Add New Genre' ),
    'new_item_name' => __( 'New Genre Name' ),
    'menu_name' => __( 'Genres' ),
  ); 	

  register_taxonomy('cryns_genre',array('cryns_audio_file'), array(
    'hierarchical' => true,
    'labels' => $labels,
    'show_ui' => true,
    'query_var' => true,
    'rewrite' => array( 'slug' => 'genre' ),
  ));
  
  // Add new taxonomy, make it hierarchical (like categories)
  $labels = array(
    'name' => _x( 'Musicians', 'taxonomy general name' ),
    'singular_name' => _x( 'Musician', 'taxonomy singular name' ),
    'search_items' =>  __( 'Search Musicians' ),
    'all_items' => __( 'All Musicians' ),
    'parent_item' => __( 'Parent Musicians' ),
    'parent_item_colon' => __( 'Parent Musicians:' ),
    'edit_item' => __( 'Edit Musician' ), 
    'update_item' => __( 'Update Musician' ),
    'add_new_item' => __( 'Add New Musician' ),
    'new_item_name' => __( 'New Musician Name' ),
    'menu_name' => __( 'Musicians' ),
  ); 	

  register_taxonomy('cryns_musicians',array('cryns_audio_file'), array(
    'hierarchical' => true,
    'labels' => $labels,
    'show_ui' => true,
    'query_var' => true,
    'rewrite' => array( 'slug' => 'musicians' ),
  ));
  

  // Add new taxonomy, NOT hierarchical (like tags)
  $labels = array(
    'name' => _x( 'Release Year', 'taxonomy general name' ),
    'singular_name' => _x( 'Release Year', 'taxonomy singular name' ),
    'search_items' =>  __( 'Search Release Years' ),
    'popular_items' => __( 'Popular Release Years' ),
    'all_items' => __( 'All Release Years' ),
    'parent_item' => null,
    'parent_item_colon' => null,
    'edit_item' => __( 'Edit Release Year' ), 
    'update_item' => __( 'Update Release Year' ),
    'add_new_item' => __( 'Add New Release Year' ),
    'new_item_name' => __( 'New Release Year' ),
    'separate_items_with_commas' => __( 'Separate Release Years with commas' ),
    'add_or_remove_items' => __( 'Add or remove Release Years' ),
    'choose_from_most_used' => __( 'Choose from the most used Release Years' ),
    'menu_name' => __( 'Release Year' ),
  ); 

  register_taxonomy('cryns_release_year','cryns_audio_file',array(
    'hierarchical' => false,
    'labels' => $labels,
    'show_ui' => true,
    'query_var' => true,
    'rewrite' => array( 'slug' => 'release-year' ),
  ));
  
  // Add new taxonomy, NOT hierarchical (like tags)
  $labels = array(
    'name' => _x( 'Track Number', 'taxonomy general name' ),
    'singular_name' => _x( 'Track Number', 'taxonomy singular name' ),
    'search_items' =>  __( 'Search Track Numbers' ),
    'popular_items' => __( 'Popular Track Numbers' ),
    'all_items' => __( 'All Track Numbers' ),
    'parent_item' => null,
    'parent_item_colon' => null,
    'edit_item' => __( 'Edit Track Number' ), 
    'update_item' => __( 'Update Track Number' ),
    'add_new_item' => __( 'Add New Track Number' ),
    'new_item_name' => __( 'New Track Number' ),
    'separate_items_with_commas' => __( 'Ex: 01 or 02 or 13' ),
    'add_or_remove_items' => __( 'Add or remove Track Numbers' ),
    'choose_from_most_used' => __( 'Choose from the most used Track Numbers' ),
    'menu_name' => __( 'Track Number' ),
  ); 

  register_taxonomy('cryns_track_number','cryns_audio_file',array(
    'hierarchical' => false,
    'labels' => $labels,
    'show_ui' => true,
    'query_var' => true,
    'rewrite' => array( 'slug' => 'track-number' ),
  ));
}